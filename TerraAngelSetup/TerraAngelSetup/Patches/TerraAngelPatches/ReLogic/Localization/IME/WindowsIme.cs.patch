--- src/Terraria/ReLogic/Localization/IME/WindowsIme.cs
+++ src/TerraAngel/ReLogic/Localization/IME/WindowsIme.cs
@@ -1,122 +_,84 @@
 using System;
 using System.Runtime.InteropServices;
-using System.Windows.Forms;
 using ReLogic.Localization.IME.Windows;
 using ReLogic.OS.Windows;
 
 namespace ReLogic.Localization.IME
 {
-    internal class WindowsIme : PlatformIme, IMessageFilter
+    internal class WindowsIme : PlatformIme
     {
         private IntPtr _windowHandle;
         private bool _isFocused;
         private WindowsMessageHook _wndProcHook;
         private bool _disposedValue;
-        public override string CompositionString => Marshal.PtrToStringUni(ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCompositionString()).ToString();
-        public override bool IsCandidateListVisible => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_IsCandidateListVisible();
-        public override uint SelectedCandidate => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidateSelection();
-        public override uint CandidateCount => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidatePageSize();
+        public override string CompositionString => "";
+        public override bool IsCandidateListVisible => false;
+        public override uint SelectedCandidate => 0;
+        public override uint CandidateCount => 0;
         public WindowsIme(WindowsMessageHook wndProcHook, IntPtr windowHandle)
         {
-            _wndProcHook = wndProcHook;
-            _windowHandle = windowHandle;
-            _isFocused = ReLogic.OS.Windows.NativeMethods.GetForegroundWindow() == _windowHandle;
-            _wndProcHook.AddMessageFilter(this);
-            ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Initialize(_windowHandle);
         }
 
         protected override void OnEnable()
         {
-            if (_isFocused)
-            {
-                ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: true);
-            }
         }
 
         protected override void OnDisable()
         {
-            ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_FinalizeString();
-            ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: false);
         }
 
         public override string GetCandidate(uint index)
         {
-            return Marshal.PtrToStringUni(ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidate(index));
-        }
-
-        public bool PreFilterMessage(ref Message message)
-        {
-            if (message.Msg == 8)
-            {
-                ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: false);
-                _isFocused = false;
-                return true;
-            }
-
-            if (message.Msg == 7)
-            {
-                if (base.IsEnabled)
-                {
-                    ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: true);
-                }
-
-                _isFocused = true;
-                return true;
-            }
-
-            if (!base.IsEnabled)
-            {
-                return false;
-            }
-
-            bool trapped = false;
-            IntPtr lParam = message.LParam;
-            ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ProcessMessage(message.HWnd, message.Msg, message.WParam, ref lParam, ref trapped);
-            message.LParam = lParam;
-            if (trapped)
-            {
-                return true;
-            }
-
-            switch (message.Msg)
-            {
-                case 81:
-                    return true;
-                case 641:
-                    message.LParam = IntPtr.Zero;
-                    break;
-                case 269:
-                    return true;
-                case 642:
-                    return true;
-                case 258:
-                    OnKeyPress((char)message.WParam.ToInt32());
-                    break;
-                case 256:
-                    if (!ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ShouldIgnoreHotKey(ref message))
-                    {
-                        ReLogic.OS.Windows.NativeMethods.TranslateMessage(ref message);
-                    }
-
-                    break;
-            }
-
-            return false;
-        }
-
+            return "";
+        }
+
+        /* public bool PreFilterMessage(ref Message message)
+		{
+			if (message.Msg == 8) {
+				ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: false);
+				_isFocused = false;
+				return true;
+			}
+			if (message.Msg == 7) {
+				if (base.IsEnabled) {
+					ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: true);
+				}
+				_isFocused = true;
+				return true;
+			}
+			if (!base.IsEnabled) {
+				return false;
+			}
+			bool trapped = false;
+			IntPtr lParam = message.LParam;
+			ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ProcessMessage(message.HWnd, message.Msg, message.WParam, ref lParam, ref trapped);
+			message.LParam = lParam;
+			if (trapped) {
+				return true;
+			}
+			switch (message.Msg) {
+				case 81:
+					return true;
+				case 641:
+					message.LParam = IntPtr.Zero;
+					break;
+				case 269:
+					return true;
+				case 642:
+					return true;
+				case 258:
+					OnKeyPress((char)message.WParam.ToInt32());
+					break;
+				case 256:
+					if (!ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ShouldIgnoreHotKey(ref message)) {
+						ReLogic.OS.Windows.NativeMethods.TranslateMessage(ref message);
+					}
+					break;
+			}
+			return false;
+		} */
         protected override void Dispose(bool disposing)
         {
-            if (!_disposedValue)
-            {
-                if (base.IsEnabled)
-                {
-                    Disable();
-                }
-
-                _wndProcHook.RemoveMessageFilter(this);
-                ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Uninitialize();
-                _disposedValue = true;
-            }
         }
 
         ~WindowsIme()
