--- src/Terraria/Terraria/Main.cs
+++ src/TerraAngel/Terraria/Main.cs
@@ -3,7 +_,6 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
-using System.Drawing;
 using System.IO;
 using System.Linq;
 using System.Reflection;
@@ -12,7 +_,6 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
-using System.Windows.Forms;
 using Microsoft.Win32;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Content;
@@ -23,7 +_,6 @@
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
-using ReLogic.Peripherals.RGB;
 using ReLogic.Utilities;
 using Terraria.Achievements;
 using Terraria.Audio;
@@ -204,8 +_,6 @@
     public static bool CaptureModeDisabled = false;
     public bool unityMouseOver;
     public static Main instance;
-    public static ChromaEngine Chroma;
-    public static ChromaHotkeyPainter ChromaPainter;
     public static Camera Camera = new Camera();
     public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();
     public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();
@@ -878,7 +_,7 @@
     public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();
     public static bool tilesLoaded = false;
     public static WorldMap Map;
-    public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];
+    public static NativeTileMap tile = new NativeTileMap(maxTilesX, maxTilesY);
     public static Dust[] dust = new Dust[6001];
     public static Star[] star = new Star[400];
     public static Item[] item = new Item[401];
@@ -981,8 +_,8 @@
     public static bool Support4K = true;
     public static float MinimumZoomComparerX = 1920f;
     public static float MinimumZoomComparerY = 1200f;
-    private static int _renderTargetMaxSize = 2048;
-    private static GraphicsProfile _selectedGraphicsProfile = ((!Program.IsXna) ? GraphicsProfile.HiDef : GraphicsProfile.Reach);
+    private static int _renderTargetMaxSize = 8192;
+    private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.HiDef;
     private static GraphicsProfile _currentGraphicsProfile = _selectedGraphicsProfile;
     public static int LogicCheckScreenWidth = 1920;
     public static int LogicCheckScreenHeight = 1200;
@@ -996,9 +_,6 @@
     private static float backSpaceRate;
     public static string motd = "";
     public static bool toggleFullscreen;
-    public static int numDisplayModes;
-    public static int[] displayWidth = new int[99];
-    public static int[] displayHeight = new int[99];
     public static bool gameMenu = true;
     public static bool menuBGChangedDay = false;
     public static bool menuBGChangedNight = false;
@@ -2518,7 +_,6 @@
         Configuration.Clear();
         Configuration.Put("ResetDefaultUIScale", false);
         Configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
-        Configuration.Put("MapEnabled", mapEnabled);
         Configuration.Put("InvasionBarMode", invasionProgressMode);
         Configuration.Put("AutoSave", autoSave);
         Configuration.Put("AutoPause", autoPause);
@@ -2674,25 +_,28 @@
 
         PendingBorderlessState = screenBorderless;
         screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-        if (Platform.IsWindows && !dedServ)
+        if (!dedServ)
         {
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
+
             if (screenBorderless)
             {
-                SetBorderlessFormStyle(form);
+                SetBorderlessFormStyle();
             }
             else if (screenMaximized)
             {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-                form.WindowState = FormWindowState.Maximized;
+                SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_MaximizeWindow(Main.instance.Window.Handle);
             }
             else
             {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
+                SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
             }
 
-            form.BringToFront();
         }
+
+        SDL2.SDL.SDL_SetWindowInputFocus(Main.instance.Window.Handle);
 
         int currentValue2 = graphics.PreferredBackBufferWidth;
         int currentValue3 = graphics.PreferredBackBufferHeight;
@@ -2711,7 +_,6 @@
         }
 
         Configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
-        Configuration.Get("MapEnabled", ref mapEnabled);
         Configuration.Get("InvasionBarMode", ref invasionProgressMode);
         Configuration.Get("AutoSave", ref autoSave);
         Configuration.Get("AutoPause", ref autoPause);
@@ -3088,7 +_,7 @@
 
                 if (num >= 91 && binaryReader.ReadBoolean() && !dedServ && Platform.IsWindows)
                 {
-                    ((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
+                    SDL2.SDL.SDL_MaximizeWindow(base.Window.Handle);
                 }
 
                 if (num >= 4)
@@ -4658,6 +_,15 @@
             graphics = new GraphicsDeviceManager(this as Game);
             base.Content.RootDirectory = "Content";
         }
+        base.Window.AllowUserResizing = true;
+        base.Window.ClientSizeChanged += (x, y) =>
+        {
+            if (!graphics.IsFullScreen && !screenBorderless)
+            {
+                SDL2.SDL.SDL_GetWindowSize(Window.Handle, out int w, out int h);
+                SetResolution(w, h);
+            }
+        };
     }
 
     private static void SetDisplayMonitor()
@@ -8736,9 +_,6 @@
         _achievementAdvisor = new AchievementAdvisor();
         OpenRecent();
         UILinksInitializer.Load();
-        Chroma = new ChromaEngine();
-        ChromaPainter = new ChromaHotkeyPainter();
-        ChromaPainter.CollectBoundKeys();
         CacheSupportedDisplaySizes();
         if (autoJoin)
         {
@@ -8752,31 +_,35 @@
 
     private static void CacheSupportedDisplaySizes()
     {
-        numDisplayModes = 0;
-        foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
-        {
-            if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
-            {
-                continue;
-            }
-
-            bool flag = true;
-            for (int i = 0; i < numDisplayModes; i++)
-            {
-                if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
-                {
-                    flag = false;
-                    break;
-                }
-            }
-
-            if (flag)
-            {
-                displayHeight[numDisplayModes] = supportedDisplayMode.Height;
-                displayWidth[numDisplayModes] = supportedDisplayMode.Width;
-                numDisplayModes++;
-            }
-        }
+        SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+
+        Main.maxScreenW = bounds.w;
+        Main.maxScreenH = bounds.h;
+        //numDisplayModes = 0;
+        //foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
+        //{
+        //    if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
+        //    {
+        //        continue;
+        //    }
+        //
+        //    bool flag = true;
+        //    for (int i = 0; i < numDisplayModes; i++)
+        //    {
+        //        if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
+        //        {
+        //            flag = false;
+        //            break;
+        //        }
+        //    }
+        //
+        //    if (flag)
+        //    {
+        //        displayHeight[numDisplayModes] = supportedDisplayMode.Height;
+        //        displayWidth[numDisplayModes] = supportedDisplayMode.Width;
+        //        numDisplayModes++;
+        //    }
+        //}
     }
 
     public static void LoadTestLog(string logname)
@@ -8799,6 +_,7 @@
         Assets = base.Services.Get<IAssetRepository>();
         Assets.AssetLoadFailHandler = OnceFailedLoadingAnAsset;
         mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
+        base.Content.RootDirectory = ClientLoader.ContentFolder;
         ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
         PixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
         VertexPixelShaderRef.Value = ShaderContentManager.Load<Effect>("PixelShader");
@@ -8827,7 +_,6 @@
 
         AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList(base.Services));
         AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
-        ChromaInitializer.Load();
         _gameContentLoadProcess = LoadContent_Deferred();
     }
 
@@ -10764,7 +_,7 @@
             {
                 newMusic = 10;
             }
-            else
+            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
             {
                 newMusic = 8;
             }
@@ -14978,8 +_,6 @@
         {
             UpdateAudio();
             GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
-            ChromaInitializer.UpdateEvents();
-            Chroma.Update(GlobalTimeWrappedHourly);
             return;
         }
 
@@ -15100,8 +_,6 @@
         DoUpdate_AutoSave();
         if (!dedServ)
         {
-            ChromaInitializer.UpdateEvents();
-            Chroma.Update(GlobalTimeWrappedHourly);
             if (superFast)
             {
                 base.IsFixedTimeStep = false;
@@ -15319,11 +_,8 @@
             hasFocus = base.IsActive;
             if (Platform.IsWindows)
             {
-                Form form = Control.FromHandle(base.Window.Handle) as Form;
-                bool num3 = form.WindowState == FormWindowState.Minimized;
-                bool flag = Form.ActiveForm == form;
-                hasFocus |= flag;
-                if (num3)
+                bool num2 = (SDL2.SDL.SDL_GetWindowFlags(base.Window.Handle) & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_MINIMIZED) == 1;
+                if (num2)
                 {
                     hasFocus = false;
                 }
@@ -15512,10 +_,8 @@
         {
             DoUpdateInWorld(_worldUpdateTimeTester);
         }
-
         if (netMode != 2)
         {
-            ChromaPainter.Update();
         }
     }
 
@@ -19026,7 +_,7 @@
                     {
                         toolTipLine[numLines] = Lang.tip[13].Value;
                     }
-
+                    if (TerraAngel.Client.Config.ClientConfig.Settings.ShowDetailedItemTooltip) toolTipLine[numLines] += $" [{item.useAnimation}/{(item.useAnimation / 60f):F2}s{(item.useAnimation != item.useTime ? $" {item.useTime}/{(item.useTime / 60f):F2}s" : "")}]";
                     numLines++;
                 }
 
@@ -19083,6 +_,7 @@
                     toolTipLine[numLines] = Lang.tip[22].Value;
                 }
 
+                if (TerraAngel.Client.Config.ClientConfig.Settings.ShowDetailedItemTooltip) toolTipLine[numLines] += $" [{num6:F2}]";
                 numLines++;
             }
 
@@ -19591,6 +_,7 @@
                     toolTipLine[numLines] = "+4" + Lang.tip[47].Value;
                     preFixLine[numLines] = true;
                     numLines++;
+
                 }
             }
 
@@ -20629,14 +_,18 @@
 
     protected void DrawPlayers_BehindNPCs()
     {
+        Main.screenPosition.Y = floatingCameraY;
         PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
         PlayerRenderer.DrawPlayers(Camera, _playersThatDrawBehindNPCs);
+        Main.screenPosition.Y = (int)Main.screenPosition.Y;
     }
 
     protected void DrawPlayers_AfterProjectiles()
     {
+        Main.screenPosition.Y = floatingCameraY;
         PotionOfReturnRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles.Where((Player p) => p.PotionOfReturnOriginalUsePosition.HasValue));
         PlayerRenderer.DrawPlayers(Camera, _playersThatDrawAfterProjectiles);
+        Main.screenPosition.Y = (int)Main.screenPosition.Y;
     }
 
     protected void DrawElderEye(SpriteBatch spriteBatch, Vector2 worldPosition, float opacity, float scale, int frameNumber, Microsoft.Xna.Framework.Color passedColor)
@@ -46928,7 +_,6 @@
 
     private static void TryDisposingEverything()
     {
-        ChromaInitializer.DisableAllDeviceGroups();
         CaptureManager.Instance.Dispose();
         audioSystem.Dispose();
     }
@@ -48114,6 +_,26 @@
             }
 
             num11++;
+            num5++;
+            array9[num11] = "TerraAngel Settings";
+            if (selectedMenu == num11)
+            {
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.ConfigUI);
+            }
+
+            num11++;
+            num5++;
+            array9[num11] = "TerraAngel Plugins";
+            if (selectedMenu == num11)
+            {
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.PluginUI);
+            }
+
+            num11++;
             array9[num11] = Lang.menu[14].Value;
             if (selectedMenu == num11)
             {
@@ -48888,6 +_,8 @@
                     menuMode = 112;
                 }
 
+
+
                 num20++;
                 array9[num20] = Lang.menu[210].Value;
                 if (selectedMenu == num20)
@@ -49321,83 +_,87 @@
             }
             else if (menuMode == 111)
             {
-                for (int num29 = 0; num29 < 9; num29++)
-                {
-                    array7[num29] = 0.85f;
-                }
-
-                num2 = 210;
-                num4 = 55;
-                int num30 = 0;
-                array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
-                if (selectedMenu == num30)
-                {
-                    SoundEngine.PlaySound(12);
-                    int num31 = 0;
-                    for (int num32 = 0; num32 < numDisplayModes; num32++)
-                    {
-                        if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
-                        {
-                            num31 = num32;
-                            break;
-                        }
-                    }
-
-                    num31 = (num31 + 1) % numDisplayModes;
-                    PendingResolutionWidth = displayWidth[num31];
-                    PendingResolutionHeight = displayHeight[num31];
-                }
-
-                num30++;
-                if (IsBorderlessDisplayAvailable())
-                {
-                    array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
-                    if (selectedMenu == num30)
-                    {
-                        SoundEngine.PlaySound(12);
-                        PendingBorderlessState = !PendingBorderlessState;
-                    }
-
-                    num30++;
-                }
-
-                array9[num30] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
-                if (selectedMenu == num30)
-                {
-                    ToggleFullScreen();
-                }
-
-                num30++;
-                array4[num30] = 100;
-                array9[num30] = Lang.menu[134].Value;
-                if (selectedMenu == num30)
-                {
-                    if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
-                    {
-                        screenBorderless = PendingBorderlessState;
-                        screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-                        SetResolution(PendingResolutionWidth, PendingResolutionHeight);
-                    }
-
-                    SoundEngine.PlaySound(11);
-                    menuMode = 1111;
-                }
-
-                num30++;
-                array9[num30] = Lang.menu[5].Value;
-                array4[num30] = 100;
-                if (selectedMenu == num30 || flag5)
-                {
-                    flag5 = false;
-                    PendingResolutionWidth = graphics.PreferredBackBufferWidth;
-                    PendingResolutionHeight = graphics.PreferredBackBufferHeight;
-                    PendingBorderlessState = screenBorderless;
-                    menuMode = 1111;
-                    SoundEngine.PlaySound(11);
-                }
-
-                num30++;
-                num5 = num30;
+                SoundEngine.PlaySound(10);
+                menuMode = 888;
+                MenuUI.SetState(ClientLoader.ResolutionUI);
+
+                //for (int num29 = 0; num29 < 9; num29++)
+                //{
+                //    array7[num29] = 0.85f;
+                //}
+
+                //num2 = 210;
+                //num4 = 55;
+                //int num30 = 0;
+                //array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
+                //if (selectedMenu == num30)
+                //{
+                //    SoundEngine.PlaySound(12);
+                //    int num31 = 0;
+                //    for (int num32 = 0; num32 < numDisplayModes; num32++)
+                //    {
+                //        if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
+                //        {
+                //            num31 = num32;
+                //            break;
+                //        }
+                //    }
+
+                //    num31 = (num31 + 1) % numDisplayModes;
+                //    PendingResolutionWidth = displayWidth[num31];
+                //    PendingResolutionHeight = displayHeight[num31];
+                //}
+
+                //num30++;
+                //if (IsBorderlessDisplayAvailable())
+                //{
+                //    array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
+                //    if (selectedMenu == num30)
+                //    {
+                //        SoundEngine.PlaySound(12);
+                //        PendingBorderlessState = !PendingBorderlessState;
+                //    }
+
+                //    num30++;
+                //}
+
+                //array9[num30] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
+                //if (selectedMenu == num30)
+                //{
+                //    ToggleFullScreen();
+                //}
+
+                //num30++;
+                //array4[num30] = 100;
+                //array9[num30] = Lang.menu[134].Value;
+                //if (selectedMenu == num30)
+                //{
+                //    if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
+                //    {
+                //        screenBorderless = PendingBorderlessState;
+                //        screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
+                //        SetResolution(PendingResolutionWidth, PendingResolutionHeight);
+                //    }
+
+                //    SoundEngine.PlaySound(11);
+                //    menuMode = 1111;
+                //}
+
+                //num30++;
+                //array9[num30] = Lang.menu[5].Value;
+                //array4[num30] = 100;
+                //if (selectedMenu == num30 || flag5)
+                //{
+                //    flag5 = false;
+                //    PendingResolutionWidth = graphics.PreferredBackBufferWidth;
+                //    PendingResolutionHeight = graphics.PreferredBackBufferHeight;
+                //    PendingBorderlessState = screenBorderless;
+                //    menuMode = 1111;
+                //    SoundEngine.PlaySound(11);
+                //}
+
+                //num30++;
+                //num5 = num30;
             }
             else if (menuMode == 1125)
             {
@@ -51598,44 +_,43 @@
 
     private static bool IsBorderlessDisplayAvailable()
     {
-        bool result = false;
-        if (Platform.IsWindows)
-        {
-            result = true;
-        }
-
-        return result;
+        return true;
     }
 
-    private static void SetDisplayModeAsBorderless(ref int width, ref int height, Form form)
+    public static void SetDisplayModeAsBorderless(ref int width, ref int height)
     {
         if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0)
         {
             screenBorderlessPendingResizes--;
-            System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
+            SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
-            width = bounds.Width;
+            width = bounds.w;
-            height = bounds.Height;
+            height = bounds.h;
+            ApplyBorderlessResolution();
             TryPickingDefaultUIScale(height);
         }
     }
 
-    private static void ApplyBorderlessResolution(Form form)
+    private static void ApplyBorderlessResolution()
     {
         if (screenBorderlessPendingResizes > 0)
         {
             screenBorderlessPendingResizes--;
-            System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-            form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
-            form.FormBorderStyle = FormBorderStyle.None;
-            form.Width = bounds.Width;
-            form.Height = bounds.Height;
+
+            SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+            SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
+            SDL2.SDL.SDL_SetWindowPosition(Main.instance.Window.Handle, bounds.x, bounds.y);
+            SDL2.SDL.SDL_SetWindowSize(Main.instance.Window.Handle, bounds.w, bounds.h);
+
+            Main.screenWidth = bounds.w;
+            Main.screenHeight = bounds.h;
         }
     }
 
-    private static void SetBorderlessFormStyle(Form form)
+    private static void SetBorderlessFormStyle()
     {
-        form.Location = new System.Drawing.Point(0, 0);
-        form.FormBorderStyle = FormBorderStyle.None;
+        SDL2.SDL.SDL_SetWindowPosition(Main.instance.Window.Handle, 0, 0);
+        SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
+        SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
     }
 
     public static void OpenCharacterSelectUI()
@@ -54659,6 +_,7 @@
 
     protected void RenderBackground()
     {
+        if (!Main.instance.IsActive && netMode == 0) return;
         if (drawToScreen)
         {
             return;
@@ -56163,6 +_,10 @@
 
     private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
     {
+        if (!WorldGen.InWorld((int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)))
+        {
+            return;
+        }
         Asset<Texture2D> asset = TextureAssets.MapBGs[0];
         int num = -1;
         Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
@@ -56963,6 +_,7 @@
 
     protected void RenderWater()
     {
+        if (!Main.instance.IsActive || netMode == 1) return;
         if (!drawToScreen)
         {
             base.GraphicsDevice.SetRenderTarget(waterTarget);
@@ -62287,6 +_,13 @@
             }
 
             TimeLogger.DetailedDrawTime(26);
+            SDL2.SDL.SDL_GetWindowSize(instance.Window.Handle, out int w, out int h);
+            w = Utils.Clamp(w, minScreenW, maxScreenW);
+            h = Utils.Clamp(h, minScreenH, maxScreenH);
+            SDL2.SDL.SDL_SetWindowSize(instance.Window.Handle, w, h);
+            base.GraphicsDevice.Viewport = new Viewport(0, 0, w, h);
+            SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
+            graphics.ApplyChanges();
         }
 
         if (shimmerAlpha > 0f)
@@ -62397,7 +_,7 @@
             DrawItemTextPopups(targetScale);
             PlayerInput.SetZoom_UI();
             spriteBatch.End();
-            spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, DefaultSamplerState, null, null, null, UIScaleMatrix);
+            spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.LinearClamp, null, null, null, UIScaleMatrix);
             DrawNetplayStatusText();
             DrawFPS();
             spriteBatch.End();
@@ -62941,10 +_,12 @@
         }
 
         instance.CameraModifiers.ApplyTo(ref screenPosition);
+        ClampScreenPositionToWorld();
+        floatingCameraY = screenPosition.Y;
         screenPosition.X = (int)screenPosition.X;
         screenPosition.Y = (int)screenPosition.Y;
-        ClampScreenPositionToWorld();
     }
+    public static float floatingCameraY;
 
     public static bool IsItDay()
     {
@@ -63414,7 +_,7 @@
                 _oldNetplayStatusText = text;
             }
 
-            Vector2 position = new Vector2(628f - ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f + (float)(screenWidth - 800), 84f);
+            Vector2 position = new Vector2(628f - MathF.Floor(ChatManager.GetStringSize(FontAssets.MouseText.Value, _netplayStatusTextSnippets, Vector2.One).X * 0.5f) + (float)(screenWidth - 800), 84f);
             int hoveredSnippet;
             if (Netplay.Connection.StatusTextHasShadows)
             {
@@ -66710,24 +_,20 @@
 
     public static void SetDisplayMode(int width, int height, bool fullscreen)
     {
+
         bool flag = false;
-        Form form = null;
-        if (Platform.IsWindows)
-        {
-            form = (Form)Control.FromHandle(instance.Window.Handle);
-            screenMaximized = form.WindowState == FormWindowState.Maximized;
-            if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
-            {
-                screenMaximized = false;
-                form.WindowState = FormWindowState.Normal;
-            }
+        IntPtr window = Main.instance.Window.Handle;
+        uint flags = SDL2.SDL.SDL_GetWindowFlags(window);
+        CacheSupportedDisplaySizes();
+        screenMaximized = (flags & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_MAXIMIZED) != 0;
 
-            flag = form.FormBorderStyle == FormBorderStyle.None;
-        }
-        else
+        if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
         {
             screenMaximized = false;
+            SDL2.SDL.SDL_RestoreWindow(window);
         }
+
+        flag = (flags & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_BORDERLESS) != 0;
 
         bool flag2 = false;
         int num3;
@@ -66746,13 +_,10 @@
                 }
             }
 
-            if (Platform.IsWindows)
+            SDL2.SDL.SDL_SetWindowMinimumSize(window, 0, 0);
+            if (!fullscreen && !flag3)
             {
-                form.MinimumSize = new Size(0, 0);
-                if (!fullscreen && !flag3)
-                {
-                    SetDisplayModeAsBorderless(ref width, ref height, form);
-                }
+                SetDisplayModeAsBorderless(ref width, ref height);
             }
 
             if (width > maxScreenW)
@@ -66788,14 +_,12 @@
         else
         {
             PlayerInput.RawMouseScale = Vector2.One;
-            if (Platform.IsWindows)
+
+            SDL2.SDL.SDL_SetWindowMinimumSize(window, minScreenW, minScreenH);
+            if (flag)
             {
-                form.MinimumSize = new Size(minScreenW, minScreenH);
-                if (flag)
-                {
-                    width = displayWidth[0];
-                    height = displayHeight[0];
-                }
+                width = 800;
+                height = 600;
             }
 
             width = Math.Min(width, maxScreenW);
@@ -66805,23 +_,33 @@
             flag2 = graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height;
         }
 
-        if (Platform.IsWindows && !fullscreen && !flag2)
+        if (!fullscreen && !flag2)
         {
+            SDL2.SDL.SDL_GetWindowSize(window, out int w, out int h);
-            if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
+            if (w < graphics.PreferredBackBufferWidth)
             {
-                width = form.ClientSize.Width;
-                flag2 = true;
+                width = w;
             }
-
-            if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
+            if (h < graphics.PreferredBackBufferHeight)
             {
-                height = form.ClientSize.Height;
-                flag2 = true;
+                height = h;
             }
         }
 
-        width &= 0x7FFFFFFE;
+        //width &= 0x7FFFFFFE;
-        height &= 0x7FFFFFFE;
+        //height &= 0x7FFFFFFE;
+
+        if (screenBorderless && !flag)
+        {
+            SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+            SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
+            SDL2.SDL.SDL_SetWindowPosition(Main.instance.Window.Handle, bounds.x, bounds.y);
+            SDL2.SDL.SDL_SetWindowSize(Main.instance.Window.Handle, bounds.w, bounds.h);
+
+            Main.screenWidth = bounds.w;
+            Main.screenHeight = bounds.h;
+        }
+
         width = Math.Max(width, minScreenW);
         height = Math.Max(height, minScreenH);
         if (graphics.IsFullScreen != fullscreen)
@@ -66831,7 +_,21 @@
             graphics.ApplyChanges();
             graphics.ToggleFullScreen();
         }
+        SDL2.SDL.SDL_GetWindowSize(window, out int ww, out int wh);
 
+        if (graphics.PreferredBackBufferWidth != ww)
+        {
+            graphics.PreferredBackBufferWidth = ww;
+        }
+        if (graphics.PreferredBackBufferHeight != wh)
+        {
+            graphics.PreferredBackBufferHeight = wh;
+        }
+
+        if (graphics.GraphicsDevice.Viewport.Width != ww || graphics.GraphicsDevice.Viewport.Height != wh)
+        {
+            graphics.GraphicsDevice.Viewport = new Viewport(0, 0, ww, wh);
+        }
         if (width != num3 || height != num4 || flag2)
         {
             mapTime = 0;
@@ -66855,22 +_,19 @@
             PendingResolutionWidth = screenWidth;
             PendingResolutionHeight = screenHeight;
             PlayerInput.CacheOriginalScreenDimensions();
-            if (Platform.IsWindows && !fullscreen)
+            if (!fullscreen)
             {
                 if (screenBorderless)
                 {
-                    ApplyBorderlessResolution(form);
+                    ApplyBorderlessResolution();
-                    form.FormBorderStyle = FormBorderStyle.None;
                 }
                 else
                 {
-                    form.FormBorderStyle = FormBorderStyle.Sizable;
+                    SDL2.SDL.SDL_SetWindowResizable(window, SDL2.SDL.SDL_bool.SDL_TRUE);
+                    SDL2.SDL.SDL_SetWindowBordered(window, SDL2.SDL.SDL_bool.SDL_TRUE);
                 }
-
-                form.SendToBack();
-                form.BringToFront();
+                SDL2.SDL.SDL_SetWindowInputFocus(window);
             }
-
             Lighting.Initialize();
             if (!drawToScreen && !_isResizingAndRemakingTargets)
             {
@@ -66914,7 +_,13 @@
             FullscreenStartup();
         }
 
+        SDL2.SDL.SDL_GetWindowSize(instance.Window.Handle, out int w, out int h);
+        w = Utils.Clamp(w, minScreenW, maxScreenW);
+        h = Utils.Clamp(h, minScreenH, maxScreenH);
+        SDL2.SDL.SDL_SetWindowSize(instance.Window.Handle, w, h);
+        base.GraphicsDevice.Viewport = new Viewport(0, 0, w, h);
         SetResolution(base.GraphicsDevice.Viewport.Width, base.GraphicsDevice.Viewport.Height);
+        graphics.ApplyChanges();
     }
 
     public static void OpenPlayerSelect(OnPlayerSelected method)
