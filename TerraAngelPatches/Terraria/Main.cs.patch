--- src/Terraria/Terraria/Main.cs
+++ src/TerraAngel/Terraria/Main.cs
@@ -12,7 +_,6 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
-using System.Windows.Forms;
 using Microsoft.Win32;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Content;
@@ -23,7 +_,6 @@
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
-using ReLogic.Peripherals.RGB;
 using ReLogic.Utilities;
 using Terraria.Achievements;
 using Terraria.Audio;
@@ -65,6 +_,7 @@
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
+using TerraAngel;
 using Terraria.UI;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
@@ -204,8 +_,6 @@
         public static bool CaptureModeDisabled = false;
         public bool unityMouseOver;
         public static Main instance;
-        public static ChromaEngine Chroma;
-        public static ChromaHotkeyPainter ChromaPainter;
         public static Camera Camera = new Camera();
         public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();
         public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();
@@ -869,7 +_,7 @@
         public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();
         public static bool tilesLoaded = false;
         public static WorldMap Map = new WorldMap(maxTilesX, maxTilesY);
-        public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];
+        public static Tilemap tile = new Tilemap(maxTilesX, maxTilesY);
         public static Dust[] dust = new Dust[6001];
         public static Star[] star = new Star[400];
         public static Item[] item = new Item[401];
@@ -971,9 +_,9 @@
         public static bool Support4K = true;
         public static float MinimumZoomComparerX = 1920f;
         public static float MinimumZoomComparerY = 1200f;
-        private static int _renderTargetMaxSize = 2048;
+        private static int _renderTargetMaxSize = 8192;
-        private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
+        private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.HiDef;
-        private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
+        private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.HiDef;
         public static int LogicCheckScreenWidth = 1920;
         public static int LogicCheckScreenHeight = 1200;
         private static WorldPreparationState _worldPreparationState = WorldPreparationState.AwaitingData;
@@ -986,9 +_,7 @@
         private static float backSpaceRate;
         public static string motd = "";
         public static bool toggleFullscreen;
-        public static int numDisplayModes;
+        //public static int numDisplayModes;
-        public static int[] displayWidth = new int[99];
-        public static int[] displayHeight = new int[99];
         public static bool gameMenu = true;
         public static bool menuBGChangedDay = false;
         public static bool menuBGChangedNight = false;
@@ -1169,7 +_,7 @@
         private float logoScale = 1f;
         private float logoScaleDirection = 1f;
         private float logoScaleSpeed = 1f;
-        private static int maxMenuItems = 16;
+        private static int maxMenuItems = 17;
         private float[] menuItemScale = new float[maxMenuItems];
         private int focusMenu = -1;
         private int selectedMenu = -1;
@@ -2426,7 +_,6 @@
             Configuration.Clear();
             Configuration.Put("ResetDefaultUIScale", false);
             Configuration.Put("SmartCursorToggle", cSmartCursorModeIsToggleAndNotHold);
-            Configuration.Put("MapEnabled", mapEnabled);
             Configuration.Put("InvasionBarMode", invasionProgressMode);
             Configuration.Put("AutoSave", autoSave);
             Configuration.Put("AutoPause", autoPause);
@@ -2579,22 +_,25 @@
 
             PendingBorderlessState = screenBorderless;
             screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
+
             if (screenBorderless)
             {
-                SetBorderlessFormStyle(form);
+                SetBorderlessFormStyle();
             }
             else if (screenMaximized)
             {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-                form.WindowState = FormWindowState.Maximized;
+                SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_MaximizeWindow(Main.instance.Window.Handle);
             }
             else
             {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
+                SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
+                SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_TRUE);
             }
 
-            form.BringToFront();
+            SDL2.SDL.SDL_SetWindowInputFocus(Main.instance.Window.Handle);
+
             int currentValue2 = graphics.PreferredBackBufferWidth;
             int currentValue3 = graphics.PreferredBackBufferHeight;
             Configuration.Get("DisplayWidth", ref currentValue2);
@@ -2612,7 +_,6 @@
             }
 
             Configuration.Get("SmartCursorToggle", ref cSmartCursorModeIsToggleAndNotHold);
-            Configuration.Get("MapEnabled", ref mapEnabled);
             Configuration.Get("InvasionBarMode", ref invasionProgressMode);
             Configuration.Get("AutoSave", ref autoSave);
             Configuration.Get("AutoPause", ref autoPause);
@@ -2983,7 +_,7 @@
 
                     if (num >= 91 && binaryReader.ReadBoolean())
                     {
-                        ((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
+                        //((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
                     }
 
                     if (num >= 4)
@@ -8047,9 +_,6 @@
             _achievementAdvisor = new AchievementAdvisor();
             OpenRecent();
             UILinksInitializer.Load();
-            Chroma = new ChromaEngine();
-            ChromaPainter = new ChromaHotkeyPainter();
-            ChromaPainter.CollectBoundKeys();
             CacheSupportedDisplaySizes();
             if (autoJoin)
             {
@@ -8063,31 +_,35 @@
 
         private static void CacheSupportedDisplaySizes()
         {
-            numDisplayModes = 0;
-            foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
-            {
-                if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
-                {
-                    continue;
-                }
-
-                bool flag = true;
-                for (int i = 0; i < numDisplayModes; i++)
-                {
-                    if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
-                    {
-                        flag = false;
-                        break;
-                    }
-                }
-
-                if (flag)
-                {
-                    displayHeight[numDisplayModes] = supportedDisplayMode.Height;
-                    displayWidth[numDisplayModes] = supportedDisplayMode.Width;
-                    numDisplayModes++;
-                }
-            }
+            SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+
+            Main.maxScreenW = bounds.w;
+            Main.maxScreenH = bounds.h;
+            //numDisplayModes = 0;
+            //foreach (DisplayMode supportedDisplayMode in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
+            //{
+            //    if (supportedDisplayMode.Width < minScreenW || supportedDisplayMode.Height < minScreenH || supportedDisplayMode.Width > maxScreenW || supportedDisplayMode.Height > maxScreenH)
+            //    {
+            //        continue;
+            //    }
+            //
+            //    bool flag = true;
+            //    for (int i = 0; i < numDisplayModes; i++)
+            //    {
+            //        if (supportedDisplayMode.Width == displayWidth[i] && supportedDisplayMode.Height == displayHeight[i])
+            //        {
+            //            flag = false;
+            //            break;
+            //        }
+            //    }
+            //
+            //    if (flag)
+            //    {
+            //        displayHeight[numDisplayModes] = supportedDisplayMode.Height;
+            //        displayWidth[numDisplayModes] = supportedDisplayMode.Width;
+            //        numDisplayModes++;
+            //    }
+            //}
         }
 
         public static void LoadTestLog(string logname)
@@ -8138,7 +_,6 @@
 
             AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList(base.Services));
             AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
-            ChromaInitializer.Load();
             _gameContentLoadProcess = LoadContent_Deferred();
         }
 
@@ -9839,7 +_,7 @@
             {
                 newMusic = (dayTime ? 42 : 15);
             }
-            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
+            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)] != null && tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
             {
                 newMusic = 26;
             }
@@ -13877,8 +_,6 @@
             {
                 UpdateAudio();
                 GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
-                ChromaInitializer.UpdateEvents();
-                Chroma.Update(GlobalTimeWrappedHourly);
                 return;
             }
 
@@ -14012,8 +_,6 @@
             DoUpdate_AutoSave();
             if (!dedServ)
             {
-                ChromaInitializer.UpdateEvents();
-                Chroma.Update(GlobalTimeWrappedHourly);
                 if (superFast)
                 {
                     base.IsFixedTimeStep = false;
@@ -14223,14 +_,6 @@
 
                 UpdateOldNPCShop();
                 hasFocus = base.IsActive;
-                Form form = Control.FromHandle(base.Window.Handle) as Form;
-                bool num2 = form.WindowState == FormWindowState.Minimized;
-                bool flag = Form.ActiveForm == form;
-                hasFocus |= flag;
-                if (num2)
-                {
-                    hasFocus = false;
-                }
 
                 if (!hasFocus && netMode == 0)
                 {
@@ -14392,11 +_,6 @@
             {
                 DoUpdateInWorld(_worldUpdateTimeTester);
             }
-
-            if (netMode != 2)
-            {
-                ChromaPainter.Update();
-            }
         }
 
         private static void TryPlayingCreditsRoll()
@@ -43833,7 +_,6 @@
 
         private static void TryDisposingEverything()
         {
-            ChromaInitializer.DisableAllDeviceGroups();
             CaptureManager.Instance.Dispose();
             audioSystem.Dispose();
         }
@@ -44959,6 +_,26 @@
                 }
 
                 num11++;
+                num5++;
+                array9[num11] = "TerraAngel Settings";
+                if (selectedMenu == num11)
+                {
+                    SoundEngine.PlaySound(10);
+                    menuMode = 888;
+                    MenuUI.SetState(ClientLoader.ConfigUI);
+                }
+
+                num11++;
+                num5++;
+                array9[num11] = "TerraAngel Plugins";
+                if (selectedMenu == num11)
+                {
+                    SoundEngine.PlaySound(10);
+                    menuMode = 888;
+                    MenuUI.SetState(ClientLoader.PluginUI);
+                }
+
+                num11++;
                 array9[num11] = Lang.menu[14].Value;
                 if (selectedMenu == num11)
                 {
@@ -45848,28 +_,6 @@
                         }
                     }
 
-                    num22++;
-                    if (mapEnabled)
-                    {
-                        array9[num22] = Lang.menu[112].Value;
-                    }
-                    else
-                    {
-                        array9[num22] = Lang.menu[113].Value;
-                    }
-
-                    if (selectedMenu == num22)
-                    {
-                        SoundEngine.PlaySound(12);
-                        if (mapEnabled)
-                        {
-                            mapEnabled = false;
-                        }
-                        else
-                        {
-                            mapEnabled = true;
-                        }
-                    }
 
                     num22++;
                     array9[num22] = (HidePassword ? Lang.menu[212].Value : Lang.menu[211].Value);
@@ -46159,83 +_,87 @@
                 }
                 else if (menuMode == 111)
                 {
-                    for (int num29 = 0; num29 < 9; num29++)
-                    {
-                        array7[num29] = 0.85f;
-                    }
-
-                    num2 = 210;
-                    num4 = 55;
-                    int num30 = 0;
-                    array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
-                    if (selectedMenu == num30)
-                    {
-                        SoundEngine.PlaySound(12);
-                        int num31 = 0;
-                        for (int num32 = 0; num32 < numDisplayModes; num32++)
-                        {
-                            if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
-                            {
-                                num31 = num32;
-                                break;
-                            }
-                        }
-
-                        num31 = (num31 + 1) % numDisplayModes;
-                        PendingResolutionWidth = displayWidth[num31];
-                        PendingResolutionHeight = displayHeight[num31];
-                    }
-
-                    num30++;
-                    if (IsBorderlessDisplayAvailable())
-                    {
-                        array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
-                        if (selectedMenu == num30)
-                        {
-                            SoundEngine.PlaySound(12);
-                            PendingBorderlessState = !PendingBorderlessState;
-                        }
-
-                        num30++;
-                    }
-
-                    array9[num30] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
-                    if (selectedMenu == num30)
-                    {
-                        ToggleFullScreen();
-                    }
-
-                    num30++;
-                    array4[num30] = 100;
-                    array9[num30] = Lang.menu[134].Value;
-                    if (selectedMenu == num30)
-                    {
-                        if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
-                        {
-                            screenBorderless = PendingBorderlessState;
-                            screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-                            SetResolution(PendingResolutionWidth, PendingResolutionHeight);
-                        }
-
-                        SoundEngine.PlaySound(11);
-                        menuMode = 1111;
-                    }
-
-                    num30++;
-                    array9[num30] = Lang.menu[5].Value;
-                    array4[num30] = 100;
-                    if (selectedMenu == num30 || flag5)
-                    {
-                        flag5 = false;
-                        PendingResolutionWidth = graphics.PreferredBackBufferWidth;
-                        PendingResolutionHeight = graphics.PreferredBackBufferHeight;
-                        PendingBorderlessState = screenBorderless;
-                        menuMode = 1111;
-                        SoundEngine.PlaySound(11);
-                    }
-
-                    num30++;
-                    num5 = num30;
+                    SoundEngine.PlaySound(10);
+                    menuMode = 888;
+                    MenuUI.SetState(ClientLoader.ResolutionUI);
+
+                    //for (int num29 = 0; num29 < 9; num29++)
+                    //{
+                    //    array7[num29] = 0.85f;
+                    //}
+
+                    //num2 = 210;
+                    //num4 = 55;
+                    //int num30 = 0;
+                    //array9[num30] = Lang.menu[73].Value + ": " + PendingResolutionWidth + "x" + PendingResolutionHeight;
+                    //if (selectedMenu == num30)
+                    //{
+                    //    SoundEngine.PlaySound(12);
+                    //    int num31 = 0;
+                    //    for (int num32 = 0; num32 < numDisplayModes; num32++)
+                    //    {
+                    //        if (displayWidth[num32] == PendingResolutionWidth && displayHeight[num32] == PendingResolutionHeight)
+                    //        {
+                    //            num31 = num32;
+                    //            break;
+                    //        }
+                    //    }
+
+                    //    num31 = (num31 + 1) % numDisplayModes;
+                    //    PendingResolutionWidth = displayWidth[num31];
+                    //    PendingResolutionHeight = displayHeight[num31];
+                    //}
+
+                    //num30++;
+                    //if (IsBorderlessDisplayAvailable())
+                    //{
+                    //    array9[num30] = Lang.menu[PendingBorderlessState ? 245 : 246].Value;
+                    //    if (selectedMenu == num30)
+                    //    {
+                    //        SoundEngine.PlaySound(12);
+                    //        PendingBorderlessState = !PendingBorderlessState;
+                    //    }
+
+                    //    num30++;
+                    //}
+
+                    //array9[num30] = (graphics.IsFullScreen ? Lang.menu[49].Value : Lang.menu[50].Value);
+                    //if (selectedMenu == num30)
+                    //{
+                    //    ToggleFullScreen();
+                    //}
+
+                    //num30++;
+                    //array4[num30] = 100;
+                    //array9[num30] = Lang.menu[134].Value;
+                    //if (selectedMenu == num30)
+                    //{
+                    //    if (graphics.IsFullScreen || PendingBorderlessState != screenBorderless || PendingResolutionWidth != screenWidth || PendingResolutionHeight != screenHeight)
+                    //    {
+                    //        screenBorderless = PendingBorderlessState;
+                    //        screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
+                    //        SetResolution(PendingResolutionWidth, PendingResolutionHeight);
+                    //    }
+
+                    //    SoundEngine.PlaySound(11);
+                    //    menuMode = 1111;
+                    //}
+
+                    //num30++;
+                    //array9[num30] = Lang.menu[5].Value;
+                    //array4[num30] = 100;
+                    //if (selectedMenu == num30 || flag5)
+                    //{
+                    //    flag5 = false;
+                    //    PendingResolutionWidth = graphics.PreferredBackBufferWidth;
+                    //    PendingResolutionHeight = graphics.PreferredBackBufferHeight;
+                    //    PendingBorderlessState = screenBorderless;
+                    //    menuMode = 1111;
+                    //    SoundEngine.PlaySound(11);
+                    //}
+
+                    //num30++;
+                    //num5 = num30;
                 }
                 else if (menuMode == 1125)
                 {
@@ -48403,35 +_,34 @@
             return true;
         }
 
-        private static void SetDisplayModeAsBorderless(ref int width, ref int height, Form form)
-        {
-            if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0)
-            {
-                screenBorderlessPendingResizes--;
-                System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-                width = bounds.Width;
-                height = bounds.Height;
-                TryPickingDefaultUIScale(height);
-            }
-        }
-
-        private static void ApplyBorderlessResolution(Form form)
-        {
-            if (screenBorderlessPendingResizes > 0)
-            {
-                screenBorderlessPendingResizes--;
-                System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-                form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
-                form.FormBorderStyle = FormBorderStyle.None;
-                form.Width = bounds.Width;
-                form.Height = bounds.Height;
-            }
-        }
-
-        private static void SetBorderlessFormStyle(Form form)
-        {
-            form.Location = new System.Drawing.Point(0, 0);
-            form.FormBorderStyle = FormBorderStyle.None;
+        private static void SetDisplayModeAsBorderless(ref int width, ref int height)
+        {
+            if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0) {
+            	screenBorderlessPendingResizes--;
+                SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+                width = bounds.w;
+            	height = bounds.h;
+            	TryPickingDefaultUIScale(height);
+            }
+        }
+
+        private static void ApplyBorderlessResolution()
+        {
+            if (screenBorderlessPendingResizes > 0) {
+            	screenBorderlessPendingResizes--;
+
+                SDL2.SDL.SDL_GetDisplayBounds(SDL2.SDL.SDL_GetWindowDisplayIndex(Main.instance.Window.Handle), out SDL2.SDL.SDL_Rect bounds);
+                SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
+                SDL2.SDL.SDL_SetWindowPosition(Main.instance.Window.Handle, bounds.x, bounds.y);
+                SDL2.SDL.SDL_SetWindowSize(Main.instance.Window.Handle, bounds.w, bounds.h);
+            }
+        }
+
+        private static void SetBorderlessFormStyle()
+        {
+            SDL2.SDL.SDL_SetWindowPosition(Main.instance.Window.Handle, 0, 0);
+            SDL2.SDL.SDL_SetWindowBordered(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
+            SDL2.SDL.SDL_SetWindowResizable(Main.instance.Window.Handle, SDL2.SDL.SDL_bool.SDL_FALSE);
         }
 
         public static void OpenCharacterSelectUI()
@@ -49771,7 +_,7 @@
                                             switch (num52)
                                             {
                                                 case 0:
-                                                    if (!tile[num50 - 1, num51 - 1].active())
+                                                    if (tile[num50 - 1, num51 - 1] != null && !tile[num50 - 1, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49780,7 +_,7 @@
                                                 case 1:
                                                     width3 = 8;
                                                     num53 = 4;
-                                                    if (!tile[num50, num51 - 1].active())
+                                                    if (tile[num50, num51 - 1] != null && !tile[num50, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49788,7 +_,7 @@
                                                     break;
                                                 case 2:
                                                     num53 = 12;
-                                                    if (!tile[num50 + 1, num51 - 1].active())
+                                                    if (tile[num50 + 1, num51 - 1] != null && !tile[num50 + 1, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49797,7 +_,7 @@
                                                 case 3:
                                                     height2 = 8;
                                                     num54 = 4;
-                                                    if (!tile[num50 - 1, num51].active())
+                                                    if (tile[num50 - 1, num51] != null && !tile[num50 - 1, num51].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49813,7 +_,7 @@
                                                     num53 = 12;
                                                     num54 = 4;
                                                     height2 = 8;
-                                                    if (!tile[num50 + 1, num51].active())
+                                                    if (tile[num50 + 1, num51] != null && !tile[num50 + 1, num51].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49821,7 +_,7 @@
                                                     break;
                                                 case 6:
                                                     num54 = 12;
-                                                    if (!tile[num50 - 1, num51 + 1].active())
+                                                    if (tile[num50 - 1, num51 + 1] != null && !tile[num50 - 1, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49832,7 +_,7 @@
                                                     height2 = 4;
                                                     num53 = 4;
                                                     num54 = 12;
-                                                    if (!tile[num50, num51 + 1].active())
+                                                    if (tile[num50, num51 + 1] != null && !tile[num50, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49841,7 +_,7 @@
                                                 case 8:
                                                     num53 = 12;
                                                     num54 = 12;
-                                                    if (!tile[num50 + 1, num51 + 1].active())
+                                                    if (tile[num50 + 1, num51 + 1] != null && !tile[num50 + 1, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -52930,6 +_,10 @@
 
         private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
         {
+            if (!WorldGen.InWorld((int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)) || tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)] == null)
+            {
+                return;
+            }
             Asset<Texture2D> asset = TextureAssets.MapBGs[0];
             int num = -1;
             Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
@@ -62935,18 +_,23 @@
             SetDisplayMode(width, height, graphics.IsFullScreen);
         }
 
+        // REAL WINFORMS CODE FIX LATER
         public static void SetDisplayMode(int width, int height, bool fullscreen)
         {
             bool flag = false;
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
-            screenMaximized = form.WindowState == FormWindowState.Maximized;
-            if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
+            IntPtr window = Main.instance.Window.Handle;
+            uint flags = SDL2.SDL.SDL_GetWindowFlags(window);
+
+            screenMaximized = (flags & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_MAXIMIZED) != 0;
+
+            if (screenBorderless && !screenMaximized && !graphics.IsFullScreen)
             {
                 screenMaximized = false;
-                form.WindowState = FormWindowState.Normal;
+                SDL2.SDL.SDL_RestoreWindow(window);
             }
 
-            flag = form.FormBorderStyle == FormBorderStyle.None;
+            flag = (flags & (uint)SDL2.SDL.SDL_WindowFlags.SDL_WINDOW_BORDERLESS) != 0;
+
             bool flag2 = false;
             int num3;
             int num4;
@@ -62964,10 +_,10 @@
                     }
                 }
 
-                form.MinimumSize = new Size(0, 0);
+                SDL2.SDL.SDL_SetWindowMinimumSize(window, 0, 0);
                 if (!fullscreen && !flag3)
                 {
-                    SetDisplayModeAsBorderless(ref width, ref height, form);
+                    SetDisplayModeAsBorderless(ref width, ref height);
                 }
 
                 if (width > maxScreenW)
@@ -63003,11 +_,12 @@
             else
             {
                 PlayerInput.RawMouseScale = Vector2.One;
-                form.MinimumSize = new Size(minScreenW, minScreenH);
+
+                SDL2.SDL.SDL_SetWindowMinimumSize(window, minScreenW, minScreenH);
                 if (flag)
                 {
-                    width = displayWidth[0];
-                    height = displayHeight[0];
+                    width = 800;
+                    height = 600;
                 }
 
                 width = Math.Min(width, maxScreenW);
@@ -63019,16 +_,14 @@
 
             if (!fullscreen && !flag2)
             {
-                if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
+                SDL2.SDL.SDL_GetWindowSize(window, out int w, out int h);
+                if (w < graphics.PreferredBackBufferWidth)
                 {
-                    width = form.ClientSize.Width;
-                    flag2 = true;
+                    width = w;
                 }
-
-                if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
+                if (h < graphics.PreferredBackBufferHeight)
                 {
-                    height = form.ClientSize.Height;
-                    flag2 = true;
+                    height = h;
                 }
             }
 
@@ -63071,18 +_,15 @@
                 {
                     if (screenBorderless)
                     {
-                        ApplyBorderlessResolution(form);
+                        ApplyBorderlessResolution();
-                        form.FormBorderStyle = FormBorderStyle.None;
                     }
                     else
                     {
-                        form.FormBorderStyle = FormBorderStyle.Sizable;
+                        SDL2.SDL.SDL_SetWindowResizable(window, SDL2.SDL.SDL_bool.SDL_TRUE);
+                        SDL2.SDL.SDL_SetWindowBordered(window, SDL2.SDL.SDL_bool.SDL_TRUE);
                     }
-
-                    form.SendToBack();
-                    form.BringToFront();
+                    SDL2.SDL.SDL_SetWindowInputFocus(window);
                 }
-
                 Lighting.Initialize();
                 if (!drawToScreen && !_isResizingAndRemakingTargets)
                 {
@@ -63101,6 +_,17 @@
             {
                 graphics.SynchronizeWithVerticalRetrace = true;
                 graphics.ApplyChanges();
+            }
+
+            SDL2.SDL.SDL_GetWindowSize(window, out int ww, out int wh);
+
+            if (graphics.PreferredBackBufferWidth != ww)
+            {
+                graphics.PreferredBackBufferWidth = ww;
+            }
+            if (graphics.PreferredBackBufferHeight != wh)
+            {
+                graphics.PreferredBackBufferHeight = wh;
             }
         }
 
