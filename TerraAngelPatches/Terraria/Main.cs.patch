--- src/Terraria/Terraria/Main.cs
+++ src/TerraAngel/Terraria/Main.cs
@@ -12,7 +_,6 @@
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
-using System.Windows.Forms;
 using Microsoft.Win32;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Content;
@@ -23,7 +_,6 @@
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
-using ReLogic.Peripherals.RGB;
 using ReLogic.Utilities;
 using Terraria.Achievements;
 using Terraria.Audio;
@@ -204,8 +_,6 @@
         public static bool CaptureModeDisabled = false;
         public bool unityMouseOver;
         public static Main instance;
-        public static ChromaEngine Chroma;
-        public static ChromaHotkeyPainter ChromaPainter;
         public static Camera Camera = new Camera();
         public static IPlayerRenderer PlayerRenderer = new LegacyPlayerRenderer();
         public static IPlayerRenderer PotionOfReturnRenderer = new ReturnGatePlayerRenderer();
@@ -869,7 +_,7 @@
         public static HairstyleUnlocksHelper Hairstyles = new HairstyleUnlocksHelper();
         public static bool tilesLoaded = false;
         public static WorldMap Map = new WorldMap(maxTilesX, maxTilesY);
-        public static Tile[,] tile = new Tile[maxTilesX, maxTilesY];
+        public static Tilemap tile = new Tilemap(maxTilesX, maxTilesY);
         public static Dust[] dust = new Dust[6001];
         public static Star[] star = new Star[400];
         public static Item[] item = new Item[401];
@@ -972,8 +_,8 @@
         public static float MinimumZoomComparerX = 1920f;
         public static float MinimumZoomComparerY = 1200f;
         private static int _renderTargetMaxSize = 2048;
-        private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
+        private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.HiDef;
-        private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
+        private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.HiDef;
         public static int LogicCheckScreenWidth = 1920;
         public static int LogicCheckScreenHeight = 1200;
         private static WorldPreparationState _worldPreparationState = WorldPreparationState.AwaitingData;
@@ -1169,7 +_,7 @@
         private float logoScale = 1f;
         private float logoScaleDirection = 1f;
         private float logoScaleSpeed = 1f;
-        private static int maxMenuItems = 16;
+        private static int maxMenuItems = 17;
         private float[] menuItemScale = new float[maxMenuItems];
         private int focusMenu = -1;
         private int selectedMenu = -1;
@@ -2579,22 +_,17 @@
 
             PendingBorderlessState = screenBorderless;
             screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
-            if (screenBorderless)
-            {
-                SetBorderlessFormStyle(form);
-            }
-            else if (screenMaximized)
-            {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-                form.WindowState = FormWindowState.Maximized;
-            }
-            else
-            {
-                form.FormBorderStyle = FormBorderStyle.Sizable;
-            }
-
-            form.BringToFront();
+            // REAL WINFORMS CODE FIX LATER
+            //Form form = (Form)Control.FromHandle(instance.Window.Handle);
+            //if (screenBorderless) {
+            //	SetBorderlessFormStyle(form);
+            //} else if (screenMaximized) {
+            //	form.FormBorderStyle = FormBorderStyle.Sizable;
+            //	form.WindowState = FormWindowState.Maximized;
+            //} else {
+            //	form.FormBorderStyle = FormBorderStyle.Sizable;
+            //}
+            //form.BringToFront();
             int currentValue2 = graphics.PreferredBackBufferWidth;
             int currentValue3 = graphics.PreferredBackBufferHeight;
             Configuration.Get("DisplayWidth", ref currentValue2);
@@ -2983,7 +_,7 @@
 
                     if (num >= 91 && binaryReader.ReadBoolean())
                     {
-                        ((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
+                        //((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
                     }
 
                     if (num >= 4)
@@ -8047,9 +_,6 @@
             _achievementAdvisor = new AchievementAdvisor();
             OpenRecent();
             UILinksInitializer.Load();
-            Chroma = new ChromaEngine();
-            ChromaPainter = new ChromaHotkeyPainter();
-            ChromaPainter.CollectBoundKeys();
             CacheSupportedDisplaySizes();
             if (autoJoin)
             {
@@ -8138,7 +_,6 @@
 
             AssetSourceController.UseResourcePacks(AssetInitializer.CreateResourcePackList(base.Services));
             AssetInitializer.LoadSplashAssets(asyncLoadForSounds: true);
-            ChromaInitializer.Load();
             _gameContentLoadProcess = LoadContent_Deferred();
         }
 
@@ -9839,7 +_,7 @@
             {
                 newMusic = (dayTime ? 42 : 15);
             }
-            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
+            else if (tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)] != null && tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)].wall == 87)
             {
                 newMusic = 26;
             }
@@ -13877,8 +_,6 @@
             {
                 UpdateAudio();
                 GlobalTimeWrappedHourly = (float)(gameTime.TotalGameTime.TotalSeconds % 3600.0);
-                ChromaInitializer.UpdateEvents();
-                Chroma.Update(GlobalTimeWrappedHourly);
                 return;
             }
 
@@ -14012,8 +_,6 @@
             DoUpdate_AutoSave();
             if (!dedServ)
             {
-                ChromaInitializer.UpdateEvents();
-                Chroma.Update(GlobalTimeWrappedHourly);
                 if (superFast)
                 {
                     base.IsFixedTimeStep = false;
@@ -14223,15 +_,14 @@
 
                 UpdateOldNPCShop();
                 hasFocus = base.IsActive;
-                Form form = Control.FromHandle(base.Window.Handle) as Form;
-                bool num2 = form.WindowState == FormWindowState.Minimized;
-                bool flag = Form.ActiveForm == form;
-                hasFocus |= flag;
-                if (num2)
-                {
-                    hasFocus = false;
-                }
-
+                // REAL WINFORMS CODE FIX LATER
+                //Form form = Control.FromHandle(base.Window.Handle) as Form;
+                //bool num2 = form.WindowState == FormWindowState.Minimized;
+                //bool flag = Form.ActiveForm == form;
+                //hasFocus |= flag;
+                //if (num2) {
+                //	hasFocus = false;
+                //}
                 if (!hasFocus && netMode == 0)
                 {
                     if (!Platform.IsOSX)
@@ -14392,11 +_,6 @@
             {
                 DoUpdateInWorld(_worldUpdateTimeTester);
             }
-
-            if (netMode != 2)
-            {
-                ChromaPainter.Update();
-            }
         }
 
         private static void TryPlayingCreditsRoll()
@@ -43833,7 +_,6 @@
 
         private static void TryDisposingEverything()
         {
-            ChromaInitializer.DisableAllDeviceGroups();
             CaptureManager.Instance.Dispose();
             audioSystem.Dispose();
         }
@@ -44959,6 +_,16 @@
                 }
 
                 num11++;
+                num5++;
+                array9[num11] = "TerraAngel Settings";
+                if (selectedMenu == num11)
+                {
+                    SoundEngine.PlaySound(10);
+                    menuMode = 888;
+                    MenuUI.SetState(TerraAngel.Loader.ClientLoader.ConfigUI);
+                }
+
+                num11++;
                 array9[num11] = Lang.menu[14].Value;
                 if (selectedMenu == num11)
                 {
@@ -48403,35 +_,33 @@
             return true;
         }
 
-        private static void SetDisplayModeAsBorderless(ref int width, ref int height, Form form)
+        private static void SetDisplayModeAsBorderless(ref int width, ref int height)
         {
-            if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0)
+            //if (screenBorderless && !graphics.IsFullScreen && screenBorderlessPendingResizes > 0) {
-            {
+            //	screenBorderlessPendingResizes--;
-                screenBorderlessPendingResizes--;
-                System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
+            //	System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-                width = bounds.Width;
+            //	width = bounds.Width;
-                height = bounds.Height;
+            //	height = bounds.Height;
-                TryPickingDefaultUIScale(height);
+            //	TryPickingDefaultUIScale(height);
-            }
+            //}
         }
 
-        private static void ApplyBorderlessResolution(Form form)
+        private static void ApplyBorderlessResolution()
         {
-            if (screenBorderlessPendingResizes > 0)
+            //if (screenBorderlessPendingResizes > 0) {
-            {
+            //	screenBorderlessPendingResizes--;
-                screenBorderlessPendingResizes--;
-                System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
+            //	System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
-                form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
+            //	form.Location = new System.Drawing.Point(bounds.X, bounds.Y);
-                form.FormBorderStyle = FormBorderStyle.None;
+            //	form.FormBorderStyle = FormBorderStyle.None;
-                form.Width = bounds.Width;
+            //	form.Width = bounds.Width;
-                form.Height = bounds.Height;
+            //	form.Height = bounds.Height;
-            }
+            //}
         }
 
-        private static void SetBorderlessFormStyle(Form form)
+        private static void SetBorderlessFormStyle()
         {
-            form.Location = new System.Drawing.Point(0, 0);
+            //form.Location = new System.Drawing.Point(0, 0);
-            form.FormBorderStyle = FormBorderStyle.None;
+            //form.FormBorderStyle = FormBorderStyle.None;
         }
 
         public static void OpenCharacterSelectUI()
@@ -49771,7 +_,7 @@
                                             switch (num52)
                                             {
                                                 case 0:
-                                                    if (!tile[num50 - 1, num51 - 1].active())
+                                                    if (tile[num50 - 1, num51 - 1] != null && !tile[num50 - 1, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49780,7 +_,7 @@
                                                 case 1:
                                                     width3 = 8;
                                                     num53 = 4;
-                                                    if (!tile[num50, num51 - 1].active())
+                                                    if (tile[num50, num51 - 1] != null && !tile[num50, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49788,7 +_,7 @@
                                                     break;
                                                 case 2:
                                                     num53 = 12;
-                                                    if (!tile[num50 + 1, num51 - 1].active())
+                                                    if (tile[num50 + 1, num51 - 1] != null && !tile[num50 + 1, num51 - 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49797,7 +_,7 @@
                                                 case 3:
                                                     height2 = 8;
                                                     num54 = 4;
-                                                    if (!tile[num50 - 1, num51].active())
+                                                    if (tile[num50 - 1, num51] != null && !tile[num50 - 1, num51].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49813,7 +_,7 @@
                                                     num53 = 12;
                                                     num54 = 4;
                                                     height2 = 8;
-                                                    if (!tile[num50 + 1, num51].active())
+                                                    if (tile[num50 + 1, num51] != null && !tile[num50 + 1, num51].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49821,7 +_,7 @@
                                                     break;
                                                 case 6:
                                                     num54 = 12;
-                                                    if (!tile[num50 - 1, num51 + 1].active())
+                                                    if (tile[num50 - 1, num51 + 1] != null && !tile[num50 - 1, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49832,7 +_,7 @@
                                                     height2 = 4;
                                                     num53 = 4;
                                                     num54 = 12;
-                                                    if (!tile[num50, num51 + 1].active())
+                                                    if (tile[num50, num51 + 1] != null && !tile[num50, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -49841,7 +_,7 @@
                                                 case 8:
                                                     num53 = 12;
                                                     num54 = 12;
-                                                    if (!tile[num50 + 1, num51 + 1].active())
+                                                    if (tile[num50 + 1, num51 + 1] != null && !tile[num50 + 1, num51 + 1].active())
                                                     {
                                                         color17 = slices[num52];
                                                     }
@@ -52930,6 +_,10 @@
 
         private static void DrawMapFullscreenBackground(Vector2 screenPosition, int screenWidth, int screenHeight)
         {
+            if (!WorldGen.InWorld((int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)) || tile[(int)(player[myPlayer].Center.X / 16f), (int)(player[myPlayer].Center.Y / 16f)] == null)
+            {
+                return;
+            }
             Asset<Texture2D> asset = TextureAssets.MapBGs[0];
             int num = -1;
             Microsoft.Xna.Framework.Color color = Microsoft.Xna.Framework.Color.White;
@@ -62935,18 +_,19 @@
             SetDisplayMode(width, height, graphics.IsFullScreen);
         }
 
+        // REAL WINFORMS CODE FIX LATER
         public static void SetDisplayMode(int width, int height, bool fullscreen)
         {
             bool flag = false;
-            Form form = (Form)Control.FromHandle(instance.Window.Handle);
-            screenMaximized = form.WindowState == FormWindowState.Maximized;
-            if (screenBorderless && screenMaximized && !graphics.IsFullScreen)
-            {
-                screenMaximized = false;
-                form.WindowState = FormWindowState.Normal;
-            }
-
-            flag = form.FormBorderStyle == FormBorderStyle.None;
+            //Form form = (Form)Control.FromHandle(instance.Window.Handle);
+            //screenMaximized = form.WindowState == FormWindowState.Maximized;
+            //if (screenBorderless && screenMaximized && !graphics.IsFullScreen) {
+            //	screenMaximized = false;
+            //	form.WindowState = FormWindowState.Normal;
+            //}
+            //flag = form.FormBorderStyle == FormBorderStyle.None;
+            screenMaximized = false;
+            flag = false;
             bool flag2 = false;
             int num3;
             int num4;
@@ -62964,12 +_,10 @@
                     }
                 }
 
-                form.MinimumSize = new Size(0, 0);
-                if (!fullscreen && !flag3)
-                {
-                    SetDisplayModeAsBorderless(ref width, ref height, form);
-                }
-
+                //form.MinimumSize = new Size(0, 0);
+                //if (!fullscreen && !flag3) {
+                //	SetDisplayModeAsBorderless(ref width, ref height, form);
+                //}
                 if (width > maxScreenW)
                 {
                     float num = (float)height / (float)width;
@@ -63003,7 +_,7 @@
             else
             {
                 PlayerInput.RawMouseScale = Vector2.One;
-                form.MinimumSize = new Size(minScreenW, minScreenH);
+                //form.MinimumSize = new Size(minScreenW, minScreenH);
                 if (flag)
                 {
                     width = displayWidth[0];
@@ -63019,17 +_,14 @@
 
             if (!fullscreen && !flag2)
             {
-                if (form.ClientSize.Width < graphics.PreferredBackBufferWidth)
-                {
-                    width = form.ClientSize.Width;
-                    flag2 = true;
-                }
-
-                if (form.ClientSize.Height < graphics.PreferredBackBufferHeight)
-                {
-                    height = form.ClientSize.Height;
-                    flag2 = true;
-                }
+                //if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
+                //	width = form.ClientSize.Width;
+                //	flag2 = true;
+                //}
+                //if (form.ClientSize.Height < graphics.PreferredBackBufferHeight) {
+                //	height = form.ClientSize.Height;
+                //	flag2 = true;
+                //}
             }
 
             width &= 0x7FFFFFFE;
@@ -63067,22 +_,17 @@
                 PendingResolutionWidth = screenWidth;
                 PendingResolutionHeight = screenHeight;
                 PlayerInput.CacheOriginalScreenDimensions();
-                if (!fullscreen)
-                {
-                    if (screenBorderless)
-                    {
-                        ApplyBorderlessResolution(form);
-                        form.FormBorderStyle = FormBorderStyle.None;
-                    }
-                    else
-                    {
-                        form.FormBorderStyle = FormBorderStyle.Sizable;
-                    }
-
-                    form.SendToBack();
-                    form.BringToFront();
-                }
-
+                // WINFORMS CODE REAL FAKE FIX LATER
+                // if (!fullscreen) {
+                // 	if (screenBorderless) {
+                // 		ApplyBorderlessResolution(form);
+                // 		form.FormBorderStyle = FormBorderStyle.None;
+                // 	} else {
+                // 		form.FormBorderStyle = FormBorderStyle.Sizable;
+                // 	}
+                // 	form.SendToBack();
+                // 	form.BringToFront();
+                // }
                 Lighting.Initialize();
                 if (!drawToScreen && !_isResizingAndRemakingTargets)
                 {
