--- src/Terraria/Terraria/Tile.cs
+++ src/TerraAngel/Terraria/Tile.cs
@@ -1,18 +_,46 @@
+using System;
+using System.Collections.Generic;
+using System.Runtime.CompilerServices;
+using System.Runtime.InteropServices;
 using Microsoft.Xna.Framework;
 using Terraria.DataStructures;
 
 namespace Terraria;
-public class Tile
+public unsafe struct Tile
 {
-    public ushort type;
-    public ushort wall;
-    public byte liquid;
-    public ushort sTileHeader;
-    public byte bTileHeader;
-    public byte bTileHeader2;
-    public byte bTileHeader3;
-    public short frameX;
-    public short frameY;
+    public readonly TileData* Data;
+    public ref ushort type => ref Data->type;
+    public ref ushort wall => ref Data->wall;
+    public ref short frameX => ref Data->frameX;
+    public ref short frameY => ref Data->frameY;
+    public ref ushort sTileHeader => ref Data->sTileHeader;
+    public ref byte liquid => ref Data->liquid;
+    public ref byte bTileHeader => ref Data->bTileHeader;
+    public ref byte bTileHeader2 => ref Data->bTileHeader2;
+    public ref byte bTileHeader3 => ref Data->bTileHeader3;
+    public Tile()
+    {
+        Data = null;
+    }
+    public Tile(TileData* data)
+    {
+        Data = data;
+    }
+    public static implicit operator Tile(ImplicitHack? o)
+    {
+        return new Tile();
+    }
+    [MethodImpl(MethodImplOptions.AggressiveInlining)]
+    public static bool operator ==(Tile rhs, object lhs) => lhs == null && rhs.Data == null;
+    [MethodImpl(MethodImplOptions.AggressiveInlining)]
+    public static bool operator !=(Tile rhs, object lhs) => !(lhs == null && rhs.Data == null);
+    public override bool Equals(object? obj) => obj is Tile tile && tile.Data == this.Data;
+    public override int GetHashCode() => HashCode.Combine(*Data);
+    public class ImplicitHack { }
+    public int GetX() => (int)((Data - Main.tile.TileHeapPtr) % Main.tile.Width);
+    public int GetX(NativeTileMap tileMap) => (int)((Data - tileMap.TileHeapPtr) % tileMap.Width);
+    public int GetY() => (int)((Data - Main.tile.TileHeapPtr) / Main.tile.Width);
+    public int GetY(NativeTileMap tileMap) => (int)((Data - tileMap.TileHeapPtr) / tileMap.Width);
     private const int Bit0 = 1;
     private const int Bit1 = 2;
     private const int Bit2 = 4;
@@ -62,52 +_,6 @@
         }
     }
 
-    public Tile()
-    {
-        type = 0;
-        wall = 0;
-        liquid = 0;
-        sTileHeader = 0;
-        bTileHeader = 0;
-        bTileHeader2 = 0;
-        bTileHeader3 = 0;
-        frameX = 0;
-        frameY = 0;
-    }
-
-    public Tile(Tile copy)
-    {
-        if (copy == null)
-        {
-            type = 0;
-            wall = 0;
-            liquid = 0;
-            sTileHeader = 0;
-            bTileHeader = 0;
-            bTileHeader2 = 0;
-            bTileHeader3 = 0;
-            frameX = 0;
-            frameY = 0;
-        }
-        else
-        {
-            type = copy.type;
-            wall = copy.wall;
-            liquid = copy.liquid;
-            sTileHeader = copy.sTileHeader;
-            bTileHeader = copy.bTileHeader;
-            bTileHeader2 = copy.bTileHeader2;
-            bTileHeader3 = copy.bTileHeader3;
-            frameX = copy.frameX;
-            frameY = copy.frameY;
-        }
-    }
-
-    public object Clone()
-    {
-        return MemberwiseClone();
-    }
-
     public void ClearEverything()
     {
         type = 0;
@@ -131,15 +_,7 @@
 
     public void CopyFrom(Tile from)
     {
-        type = from.type;
-        wall = from.wall;
-        liquid = from.liquid;
-        sTileHeader = from.sTileHeader;
-        bTileHeader = from.bTileHeader;
-        bTileHeader2 = from.bTileHeader2;
-        bTileHeader3 = from.bTileHeader3;
-        frameX = from.frameX;
-        frameY = from.frameY;
+        *Data = *from.Data;
     }
 
     public bool isTheSameAs(Tile compTile)
