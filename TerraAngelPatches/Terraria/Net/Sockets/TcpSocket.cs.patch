--- src/Terraria/Terraria/Net/Sockets/TcpSocket.cs
+++ src/TerraAngel/Terraria/Net/Sockets/TcpSocket.cs
@@ -17,6 +_,7 @@
     private SocketConnectionAccepted _listenerCallback;
     private RemoteAddress _remoteAddress;
     private bool _isListening;
+    private NetworkStream networkStream;
     public int MessagesInQueue => _messagesInQueue;
     public TcpSocket()
     {
@@ -52,12 +_,13 @@
         TcpAddress tcpAddress = (TcpAddress)address;
         _connection.Connect(tcpAddress.Address, tcpAddress.Port);
         _remoteAddress = address;
+        networkStream = _connection.GetStream();
     }
 
     private void ReadCallback(IAsyncResult result)
     {
         Tuple<SocketReceiveCallback, object> tuple = (Tuple<SocketReceiveCallback, object>)result.AsyncState;
-        tuple.Item1(tuple.Item2, _connection.GetStream().EndRead(result));
+        tuple.Item1(tuple.Item2, networkStream.EndRead(result));
     }
 
     private void SendCallback(IAsyncResult result)
@@ -76,7 +_,7 @@
 
         try
         {
-            _connection.GetStream().EndWrite(result);
+            networkStream.EndWrite(result);
             tuple.Item1(tuple.Item2);
         }
         catch (Exception)
@@ -94,17 +_,17 @@
         if (!Platform.IsWindows)
         {
             byte[] array = LegacyNetBufferPool.RequestBuffer(data, offset, size);
-            _connection.GetStream().BeginWrite(array, 0, size, SendCallback, new object[2] { new Tuple<SocketSendCallback, object>(callback, state), array });
+            networkStream.BeginWrite(array, 0, size, SendCallback, new object[2] { new Tuple<SocketSendCallback, object>(callback, state), array });
         }
         else
         {
-            _connection.GetStream().BeginWrite(data, 0, size, SendCallback, new Tuple<SocketSendCallback, object>(callback, state));
+            networkStream.BeginWrite(data, 0, size, SendCallback, new Tuple<SocketSendCallback, object>(callback, state));
         }
     }
 
     void ISocket.AsyncReceive(byte[] data, int offset, int size, SocketReceiveCallback callback, object state)
     {
-        _connection.GetStream().BeginRead(data, offset, size, ReadCallback, new Tuple<SocketReceiveCallback, object>(callback, state));
+        networkStream.BeginRead(data, offset, size, ReadCallback, new Tuple<SocketReceiveCallback, object>(callback, state));
     }
 
     bool ISocket.IsDataAvailable()
@@ -114,7 +_,7 @@
             return false;
         }
 
-        return _connection.GetStream().DataAvailable;
+        return networkStream.DataAvailable;
     }
 
     RemoteAddress ISocket.GetRemoteAddress()
