--- src/Terraria/Terraria/NetMessage.cs
+++ src/TerraAngel/Terraria/NetMessage.cs
@@ -3,6 +_,7 @@
 using Ionic.Zlib;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics.PackedVector;
+using TerraAngel;
 using Terraria.Chat;
 using Terraria.DataStructures;
 using Terraria.GameContent;
@@ -75,7 +_,7 @@
         return true;
     }
 
-    public static void SendData(int msgType, int remoteClient = -1, int ignoreClient = -1, NetworkText text = null, int number = 0, float number2 = 0f, float number3 = 0f, float number4 = 0f, int number5 = 0, int number6 = 0, int number7 = 0)
+    public static void SendData(int msgType, int remoteClient = -1, int ignoreClient = -1, NetworkText? text = null, int number = 0, float number2 = 0f, float number3 = 0f, float number4 = 0f, int number5 = 0, int number6 = 0, int number7 = 0)
     {
         if (Main.netMode == 0)
         {
@@ -1731,281 +_,7 @@
                     }
                 }
             }
-            else if (remoteClient == -1)
-            {
-                switch (msgType)
-                {
-                    case 34:
-                    case 69:
-                        {
-                            for (int num25 = 0; num25 < 256; num25++)
-                            {
-                                if (num25 != ignoreClient && buffer[num25].broadcast && Netplay.Clients[num25].IsConnected())
-                                {
-                                    try
-                                    {
-                                        buffer[num25].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num25].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num25].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            break;
-                        }
-
-                    case 20:
-                        {
-                            for (int num29 = 0; num29 < 256; num29++)
-                            {
-                                if (num29 != ignoreClient && buffer[num29].broadcast && Netplay.Clients[num29].IsConnected() && Netplay.Clients[num29].SectionRange((int)Math.Max(number3, number4), number, (int)number2))
-                                {
-                                    try
-                                    {
-                                        buffer[num29].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num29].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num29].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            break;
-                        }
-
-                    case 23:
-                        {
-                            NPC nPC4 = Main.npc[number];
-                            for (int num30 = 0; num30 < 256; num30++)
-                            {
-                                if (num30 == ignoreClient || !buffer[num30].broadcast || !Netplay.Clients[num30].IsConnected())
-                                {
-                                    continue;
-                                }
-
-                                bool flag6 = false;
-                                if (nPC4.boss || nPC4.netAlways || nPC4.townNPC || !nPC4.active)
-                                {
-                                    flag6 = true;
-                                }
-                                else if (nPC4.netSkip <= 0)
-                                {
-                                    Rectangle rect5 = Main.player[num30].getRect();
-                                    Rectangle rect6 = nPC4.getRect();
-                                    rect6.X -= 2500;
-                                    rect6.Y -= 2500;
-                                    rect6.Width += 5000;
-                                    rect6.Height += 5000;
-                                    if (rect5.Intersects(rect6))
-                                    {
-                                        flag6 = true;
-                                    }
-                                }
-                                else
-                                {
-                                    flag6 = true;
-                                }
-
-                                if (flag6)
-                                {
-                                    try
-                                    {
-                                        buffer[num30].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num30].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num30].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            nPC4.netSkip++;
-                            if (nPC4.netSkip > 4)
-                            {
-                                nPC4.netSkip = 0;
-                            }
-
-                            break;
-                        }
-
-                    case 28:
-                        {
-                            NPC nPC3 = Main.npc[number];
-                            for (int num27 = 0; num27 < 256; num27++)
-                            {
-                                if (num27 == ignoreClient || !buffer[num27].broadcast || !Netplay.Clients[num27].IsConnected())
-                                {
-                                    continue;
-                                }
-
-                                bool flag5 = false;
-                                if (nPC3.life <= 0)
-                                {
-                                    flag5 = true;
-                                }
-                                else
-                                {
-                                    Rectangle rect3 = Main.player[num27].getRect();
-                                    Rectangle rect4 = nPC3.getRect();
-                                    rect4.X -= 3000;
-                                    rect4.Y -= 3000;
-                                    rect4.Width += 6000;
-                                    rect4.Height += 6000;
-                                    if (rect3.Intersects(rect4))
-                                    {
-                                        flag5 = true;
-                                    }
-                                }
-
-                                if (flag5)
-                                {
-                                    try
-                                    {
-                                        buffer[num27].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num27].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num27].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            break;
-                        }
-
-                    case 13:
-                        {
-                            for (int num28 = 0; num28 < 256; num28++)
-                            {
-                                if (num28 != ignoreClient && buffer[num28].broadcast && Netplay.Clients[num28].IsConnected())
-                                {
-                                    try
-                                    {
-                                        buffer[num28].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num28].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num28].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            Main.player[number].netSkip++;
-                            if (Main.player[number].netSkip > 2)
-                            {
-                                Main.player[number].netSkip = 0;
-                            }
-
-                            break;
-                        }
-
-                    case 27:
-                        {
-                            Projectile projectile2 = Main.projectile[number];
-                            for (int num26 = 0; num26 < 256; num26++)
-                            {
-                                if (num26 == ignoreClient || !buffer[num26].broadcast || !Netplay.Clients[num26].IsConnected())
-                                {
-                                    continue;
-                                }
-
-                                bool flag4 = false;
-                                if (projectile2.type == 12 || Main.projPet[projectile2.type] || projectile2.aiStyle == 11 || projectile2.netImportant)
-                                {
-                                    flag4 = true;
-                                }
-                                else
-                                {
-                                    Rectangle rect = Main.player[num26].getRect();
-                                    Rectangle rect2 = projectile2.getRect();
-                                    rect2.X -= 5000;
-                                    rect2.Y -= 5000;
-                                    rect2.Width += 10000;
-                                    rect2.Height += 10000;
-                                    if (rect.Intersects(rect2))
-                                    {
-                                        flag4 = true;
-                                    }
-                                }
-
-                                if (flag4)
-                                {
-                                    try
-                                    {
-                                        buffer[num26].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num26].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num26].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            break;
-                        }
-
-                    default:
-                        {
-                            for (int num24 = 0; num24 < 256; num24++)
-                            {
-                                if (num24 != ignoreClient && (buffer[num24].broadcast || (Netplay.Clients[num24].State >= 3 && msgType == 10)) && Netplay.Clients[num24].IsConnected())
-                                {
-                                    try
-                                    {
-                                        buffer[num24].spamCount++;
-                                        Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                                        Netplay.Clients[num24].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[num24].ServerWriteCallBack);
-                                    }
-                                    catch
-                                    {
-                                    }
-                                }
-                            }
-
-                            break;
-                        }
-                }
-            }
-            else if (Netplay.Clients[remoteClient].IsConnected())
-            {
-                try
-                {
-                    buffer[remoteClient].spamCount++;
-                    Main.ActiveNetDiagnosticsUI.CountSentMessage(msgType, num23);
-                    Netplay.Clients[remoteClient].Socket.AsyncSend(buffer[num].writeBuffer, 0, num23, Netplay.Clients[remoteClient].ServerWriteCallBack);
-                }
-                catch
-                {
-                }
-            }
-
-            if (Main.verboseNetplay)
-            {
-                for (int num31 = 0; num31 < num23; num31++)
-                {
-                }
-
-                for (int num32 = 0; num32 < num23; num32++)
-                {
-                    _ = buffer[num].writeBuffer[num32];
-                }
-            }
-
             buffer[num].writeLocked = false;
-            if (msgType == 2 && Main.netMode == 2)
-            {
-                Netplay.Clients[num].PendingTermination = true;
-                Netplay.Clients[num].PendingTerminationApproved = true;
-            }
         }
     }
 
@@ -2042,8 +_,6 @@
                     continue;
                 }
 
-                if (tile != null)
-                {
                     if (num4 > 0)
                     {
                         array[num5] = (byte)((uint)num4 & 0xFFu);
@@ -2063,7 +_,6 @@
                     array[num6] = b;
                     writer.Write(array, num6, num5 - num6);
                     num4 = 0;
-                }
 
                 num5 = 4;
                 byte b3;
@@ -2387,9 +_,9 @@
         DecompressTileBlock_Inner(binaryReader, binaryReader.ReadInt32(), binaryReader.ReadInt32(), binaryReader.ReadInt16(), binaryReader.ReadInt16());
     }
 
-    public static void DecompressTileBlock_Inner(BinaryReader reader, int xStart, int yStart, int width, int height)
+    public unsafe static void DecompressTileBlock_Inner(BinaryReader reader, int xStart, int yStart, int width, int height)
     {
-        Tile tile = null;
+        Tile tile = new Tile();
         int num = 0;
         for (int i = yStart; i < yStart + height; i++)
         {
@@ -2398,15 +_,7 @@
                 if (num != 0)
                 {
                     num--;
-                    if (Main.tile[j, i] == null)
-                    {
-                        Main.tile[j, i] = new Tile(tile);
-                    }
-                    else
-                    {
-                        Main.tile[j, i].CopyFrom(tile);
+                    Main.tile[j, i].CopyFrom(tile);
-                    }
-
                     continue;
                 }
 
@@ -2414,15 +_,7 @@
                 byte b;
                 byte b3 = (b2 = (b = 0));
                 tile = Main.tile[j, i];
-                if (tile == null)
-                {
-                    tile = new Tile();
-                    Main.tile[j, i] = tile;
-                }
-                else
-                {
-                    tile.ClearEverything();
+                tile.ClearEverything();
-                }
 
                 byte b4 = reader.ReadByte();
                 bool flag = false;
@@ -2652,23 +_,33 @@
     {
         lock (buffer[i])
         {
-            try
+            if (buffer[i].totalData + streamLength < buffer[i].readBuffer.Length)
             {
                 Buffer.BlockCopy(bytes, 0, buffer[i].readBuffer, buffer[i].totalData, streamLength);
                 buffer[i].totalData += streamLength;
                 buffer[i].checkBytes = true;
             }
-            catch
+            else
             {
-                if (Main.netMode == 1)
+                // Executing goes here when it overflows
+                // Maybe log it or something
+                // Clear the read buffer up a bit
+                int before;
+                int after;
+                while (buffer[i].totalData > 200)
                 {
-                    Main.menuMode = 15;
-                    Main.statusText = Language.GetTextValue("Error.BadHeaderBufferOverflow");
-                    Netplay.Disconnect = true;
+                    before = buffer[i].totalData;
+                    CheckBytes(i);
+                    after = buffer[i].totalData;
+                    if (before == after)
+                        break;
                 }
-                else
+
+                if (buffer[i].totalData + streamLength < buffer[i].readBuffer.Length)
                 {
-                    Netplay.Clients[i].PendingTermination = true;
+                    Buffer.BlockCopy(bytes, 0, buffer[i].readBuffer, buffer[i].totalData, streamLength);
+                    buffer[i].totalData += streamLength;
+                    buffer[i].checkBytes = true;
                 }
             }
         }
@@ -2692,6 +_,8 @@
                 while (num2 >= 2)
                 {
                     int num3 = BitConverter.ToUInt16(buffer[bufferIndex].readBuffer, num);
+                    if (num3 <= 0)
+                        break; // prevent zero length packets lmao
                     if (num2 >= num3)
                     {
                         long position = buffer[bufferIndex].reader.BaseStream.Position;
